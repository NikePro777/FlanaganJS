const set = new Set([1, 2, 3, 3, 3, 3, 4, 5, 5, 6]);
console.log(set); // и если мы посмотрим, то каждое значение НЕ дублируется. {1, 2, 3, 4, 5, 6}
// в этом и есть особенность - каждое значение внутри сета - уникально

set.add(10).add(20).add(10); // метод добавления ноовго значения
console.log(set); // 10 он добавил только один раз
console.log(set.has(30)); // по аналогии с map проверяет есть ли данный элемент
console.log(set.size); // размер
console.log(set.delete(20)); // удаление
// set.clear(); // полностью чистит
console.log(set.values()); // получаем все значения {1, 2, 3, 4, 5, …}
console.log(set.keys()); // получаем тоже самое... так как set проще map и учитывая что тут всего лишь значения хранятся - выдает одно и то же {1, 2, 3, 4, 5, …}
console.log(set.entries()); // {1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, …} выдает одно и тоже, ну логично раз keys и values совпадают

// модем пробегаться по сету методом for of :
for (let key of set) {
  console.log(key);
} // ну и собственно выдаст все ключи, так как они в единственном экземпляре

// практика
// нужно написать функцию, которая возвращает уникальное значение из массива

function uniqValues(array) {
  //   return [...new Set(array)]; можно еще по другому
  return Array.from(new Set(array));
}

console.log(
  uniqValues([1, 1, 2, 2, 3, 3, 4, 5, 6, 5, 3, 5, 6, 7, 4, 5, 6, 7, 5, 4, 0])
);
