// Object - Все что отличается от строки, числа, дулев значения, символа, Null или undefined - является обьектом
// ключ - строка или символ. Обьекты изменяемые и обраатываются по ссылке!!! а не по значению
// Свойства которые не были унасоедованы- собственные свойста. Обьект который мы создаем обладает 3 атрибутами свойства:
// writable - допускает запись
// enumerable - есть ли перечисление (возвращает ли свойства в цикле for/in)
// configurable - Можно ли удалять свойство и изменять его атрибуты
// 6.2 Создание обьекта
// 6.2.1 с помощью обьектных литералов
let book = {
  "main-title": "JavaScript", // т.к. разделено пробелами или знаками, то используются строковые литералы
  "sub-title": "The Diffinitive Guide",
  for: "all audiences", // фор без ковычек - зарезервированное слово
  aas: 123,
  autor: {
    firstname: "David",
    surname: "Flanagan",
  },
};
// 6.2.2 С помощью операции new.. создается новый прототип. new вообще конструкция для встроенных типов, например:
let o = new Object(); // ==={}
let a = new Array(); // ===[]
let d = new Date(); // Создает обьект представляющий текущее время
let r = new Map(); // обьект для отображения пары ключ значение
console.log(o, a, d, r);
// 6.2.3 Прототипы. Почти все созданные обьекты происходят от обьекта прототипа, т.е. наследуют все его свойства.
//Object.prototype - один из редких обьектов не имеющих прототипов (т.е. не наследует никаких свойств)
// 6.2.4 Object.create()
// создает новый обьект, используя в качестве его прототипа первый аргумент:
let o1 = Object.create({ x: 1, y: 2 }); // т.е. о1 наследует свойства х и у
console.log(o1.x + o1.y); // =>3
let o2 = Object.create(null); // Создали обьект без прототипа... т.е. он даже с методом toString() не сможет работать.console.log(o2.toString()) =>TypeError
// чтобы чз create создать обычный пустой обьект (как {} или new Object()) то можно просто указать этот глобальный обьект:
let o3 = Object.create(Object.prototype);
// Так же у Object.create() есть необязательный второй аргумент - свойство нового обьекта
// Это надо если мы хотим в нашем обьекте унаследовать свойства функции но при этом над ней не имеем контроля
let o4 = { x: "не изменяйте это значение" };
// library.function(Object.create(o)); Защита от модификации.... хз что это!

// 6.3 Запрашивание и установка свойств
// Чтобы получить свойство применяем либо точку либо []
// если точка то за ней должен быть простой идентификатор, именующий свойство (крч имя свойства)
// если [] то в нем выражение, которое может быть преобразовано в СТРОКУ или СИМВОЛ (Принято числа), именуюшая свойство
let autor = book.autor; // получили свойство autor от обьекта book
let name = autor.surname;
let title = book["main-title"]; // получили свойство 'main-title' обьекта book
console.log(autor, name, title);
// Аналогично можем присваивать новые свойства, главное чтобы справа знак = стоял
book.edition = 7; // Создали свойство edition у обьекта book
book["main-title"] = "ECMA Script"; // Изменили свойство
console.log(book);
