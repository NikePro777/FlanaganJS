// Определяется фабричная функция, которая создает и инициализирует новый экземпляр данного класса
function range(from, to) {
  // Используем Object.create() для создания обьекта, который наследуется от обьекта прототипа, определенного ниже. Обьект прототипа
  // хранится как свойство этой функции и определяет разные методы (поведение) для всех обьектов, представляющих диапазоны.
  let r = Object.create(range.methods);

  // Сохраняет начальную и конечную точки (состояние) нового обьекта диапазона. Эти свойства не являются наследуемыми и уникальны для этого обьекта
  r.from = from;
  r.to = to;

  // возвращаем новый обьект
  return r;
}

// А здесь обьект прототипа, определяющий свойства, которые наследуются
range.methods = {
  // Возвращает true если x входит в диапазон
  //Работает с числами, текстами и date
  includes(x) {
    return this.from <= x && x <= this.to;
  },

  // Генераторная функция, которая делает экземпляры итерируемыми. работает только с числами
  *[Symbol.iterator]() {
    for (let x = Math.ceil(this.from); x <= this.to; x++) yield x;
  },

  // Возвращает строковое представление диапазона
  toString() {
    return "(" + this.from + "..." + this.to + ")";
  },
};
let r = range(1, 3);
console.log(r.includes(2)); // true т.к. ыходит в диапазон
console.log(r.toString()); // (1...3)
console.log(...r); // 1 2 3
